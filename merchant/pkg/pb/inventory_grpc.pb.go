// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: inventory.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryGrpc_DeductQuantity_FullMethodName = "/pb.InventoryGrpc/DeductQuantity"
	InventoryGrpc_RefundQuantity_FullMethodName = "/pb.InventoryGrpc/RefundQuantity"
	InventoryGrpc_GetInventory_FullMethodName   = "/pb.InventoryGrpc/GetInventory"
)

// InventoryGrpcClient is the client API for InventoryGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryGrpcClient interface {
	DeductQuantity(ctx context.Context, in *UpdateInventoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RefundQuantity(ctx context.Context, in *UpdateInventoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*Inventory, error)
}

type inventoryGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryGrpcClient(cc grpc.ClientConnInterface) InventoryGrpcClient {
	return &inventoryGrpcClient{cc}
}

func (c *inventoryGrpcClient) DeductQuantity(ctx context.Context, in *UpdateInventoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryGrpc_DeductQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryGrpcClient) RefundQuantity(ctx context.Context, in *UpdateInventoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryGrpc_RefundQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryGrpcClient) GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*Inventory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Inventory)
	err := c.cc.Invoke(ctx, InventoryGrpc_GetInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryGrpcServer is the server API for InventoryGrpc service.
// All implementations must embed UnimplementedInventoryGrpcServer
// for forward compatibility.
type InventoryGrpcServer interface {
	DeductQuantity(context.Context, *UpdateInventoryRequest) (*emptypb.Empty, error)
	RefundQuantity(context.Context, *UpdateInventoryRequest) (*emptypb.Empty, error)
	GetInventory(context.Context, *GetInventoryRequest) (*Inventory, error)
	mustEmbedUnimplementedInventoryGrpcServer()
}

// UnimplementedInventoryGrpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryGrpcServer struct{}

func (UnimplementedInventoryGrpcServer) DeductQuantity(context.Context, *UpdateInventoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeductQuantity not implemented")
}
func (UnimplementedInventoryGrpcServer) RefundQuantity(context.Context, *UpdateInventoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundQuantity not implemented")
}
func (UnimplementedInventoryGrpcServer) GetInventory(context.Context, *GetInventoryRequest) (*Inventory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedInventoryGrpcServer) mustEmbedUnimplementedInventoryGrpcServer() {}
func (UnimplementedInventoryGrpcServer) testEmbeddedByValue()                       {}

// UnsafeInventoryGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryGrpcServer will
// result in compilation errors.
type UnsafeInventoryGrpcServer interface {
	mustEmbedUnimplementedInventoryGrpcServer()
}

func RegisterInventoryGrpcServer(s grpc.ServiceRegistrar, srv InventoryGrpcServer) {
	// If the following call pancis, it indicates UnimplementedInventoryGrpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryGrpc_ServiceDesc, srv)
}

func _InventoryGrpc_DeductQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryGrpcServer).DeductQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryGrpc_DeductQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryGrpcServer).DeductQuantity(ctx, req.(*UpdateInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryGrpc_RefundQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryGrpcServer).RefundQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryGrpc_RefundQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryGrpcServer).RefundQuantity(ctx, req.(*UpdateInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryGrpc_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryGrpcServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryGrpc_GetInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryGrpcServer).GetInventory(ctx, req.(*GetInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryGrpc_ServiceDesc is the grpc.ServiceDesc for InventoryGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.InventoryGrpc",
	HandlerType: (*InventoryGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeductQuantity",
			Handler:    _InventoryGrpc_DeductQuantity_Handler,
		},
		{
			MethodName: "RefundQuantity",
			Handler:    _InventoryGrpc_RefundQuantity_Handler,
		},
		{
			MethodName: "GetInventory",
			Handler:    _InventoryGrpc_GetInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory.proto",
}
